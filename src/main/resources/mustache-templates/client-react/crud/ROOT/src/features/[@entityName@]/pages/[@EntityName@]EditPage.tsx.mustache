import React, { useState, useEffect } from "react";
import { useFormik } from "formik";
import { useTranslation } from "react-i18next";
import { useSelector, useDispatch } from "react-redux";
import { useHistory, useParams } from "react-router-dom";
import { Form } from "@jfront/ui-core";
import { ComboBox, ComboBoxItem, DatePicker, NumberInput, TextInput } from "@jfront/ui-core";
import { RootState, useAppDispatch } from "../../../app/store";
import { getRecordById, updateRecord } from "../state/[@EntityName@]Slice";

import {
  [@#fieldsEdit@]
  [@#isTypeOption@][@FieldName@]Option,[@/isTypeOption@]
  [@/fieldsEdit@]
  [@EntityName@], [@EntityName@]Update} from "../api/[@EntityName@]Types";
import {[@entityName@]CrudApi} from "../api/[@EntityName@]CrudApi";
import {
  [@#fieldsEdit@]
  [@#isTypeOption@]get[@FieldName@]Options,[@/isTypeOption@]
  [@/fieldsEdit@]
} from "../api/[@EntityName@]Api";

const [@EntityName@]EditPage = ({ formRef }) => {
  //----------------
  const history = useHistory();
  const { t } = useTranslation();
  const dispatch = useAppDispatch();
  //----------------

  [@#fieldsEdit@]
  [@#isTypeOption@]const [[@fieldName@]Options, set[@FieldName@]Options] = useState<[@FieldName@]Option[]>();[@/isTypeOption@]
  [@/fieldsEdit@]
  
  let { [@entityId@] } = useParams();
  const { currentRecord } = useSelector((state: RootState) => state.[@entityName@].[@entityName@]CrudSlice);

  useEffect(() => {
    dispatch(getRecordById({ primaryKey: [@entityId@] }));
  }, []);

  [@#fieldsEdit@]
  [@#isTypeOption@]
  useEffect(() => {
    get[@FieldName@]Options().then((options) => {
      set[@FieldName@]Options(options);
    });
  }, []);
  [@/isTypeOption@]
  [@/fieldsEdit@]

  const formik = useFormik<[@EntityName@]Update>({
    initialValues: {
      [@#fieldsEdit@]
      [@fieldName@][@#isTypeOption@]Code[@/isTypeOption@]: currentRecord?.[@fieldName@] ? [@#isTypeDate@]new Date([@/isTypeDate@]currentRecord?.[@fieldName@][@#isTypeOption@].value[@/isTypeOption@][@#isTypeDate@])[@/isTypeDate@] : [@#isTypeOption@]""[@/isTypeOption@][@#isTypeText@]""[@/isTypeText@][@#isTypeDate@]null[@/isTypeDate@],
      [@/fieldsEdit@]
    },
    onSubmit: (values: [@EntityName@]Update) => {
      if ([@entityId@]) {
        dispatch(updateRecord({ primaryKey: [@entityId@], values: values }))
          .then(() => {
            history.push(`/[@entity_name_dash@]/${[@entityId@]}/detail`);
          });
      }
    },
    validate: (values) => {
      const errors: {
        [@#fieldsEdit@]
        [@#isFieldRequired@]
        [@fieldName@][@#isTypeOption@]Code[@/isTypeOption@]?: string;
        [@/isFieldRequired@]
        [@/fieldsEdit@]
      } = {};
      [@#fieldsEdit@]
      [@#isFieldRequired@]
      if (!values.[@fieldName@][@#isTypeOption@]Code[@/isTypeOption@]) {
        errors.[@fieldName@][@#isTypeOption@]Code[@/isTypeOption@] = t("validation.notEmpty");
      }
      [@/isFieldRequired@]
      [@/fieldsEdit@]
      
      return errors;
    },
    enableReinitialize: true,
  });

  return (
    <>
      <Form id="edit-form" onSubmit={formik.handleSubmit} ref={formRef}>
        
        [@#fieldsEdit@]
        [@>FieldTemplate.mustache@]
        [@/fieldsEdit@]
        
      </Form>
    </>
  );
};

export default [@EntityName@]EditPage;
