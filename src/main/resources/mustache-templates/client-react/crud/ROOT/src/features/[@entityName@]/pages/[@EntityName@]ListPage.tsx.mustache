import React, { useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import { useHistory } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { Grid } from "@jfront/ui-core";
import { [@EntityName@] } from "../api/[@EntityName@]Types";
import { querySearch } from "../state/[@EntityName@]SearchSlice";
import { actions as crudActions } from "../state/[@EntityName@]Slice";
import { RootState } from "../../../app/store";
import queryString from "query-string";

const useQuery = () => {
  return queryString.parse(window.location.search, { arrayFormat: "bracket" });
};

const [@EntityName@]ListPage = () => {
  //----------------
  const history = useHistory();
  let query = useQuery();
  const { t } = useTranslation();
  const dispatch = useDispatch();
  //----------------
  const [page, setPage] = useState({
    pageSize: query?.pageSize ? parseInt(query.pageSize as string) : 25,
    pageNumber: query?.page ? parseInt(query.page as string) : 1,
  });

  const { currentRecord } = useSelector(
    (state: RootState) => state.[@entityName@].[@entityName@]CrudSlice
  );

  const { records, searchRequest, isLoading, resultSetSize } = useSelector(
    (state: RootState) => state.[@entityName@].[@entityName@]SearchSlice
  );

  useEffect(() => {
    if (searchRequest) {
      dispatch(
        querySearch(
          searchRequest.template,
          searchRequest.listSortConfiguration,
          page.pageSize,
          page.pageNumber
        )
      );
    }
  }, [page, dispatch]);

  return (
    <>
      <Grid
        id="table"
        columns={[
          [@#fieldsList@]
          {
            Header: t("[@entityName@].fields.[@fieldName@]"),
            [@#isTypeOption@]id: "[@fieldName@]",[@/isTypeOption@]
            accessor: "[@fieldName@][@#isTypeOption@].name[@/isTypeOption@]",
          },
          [@/fieldsList@]
        ]}
        isLoading={isLoading}
        data={records}
        totalRowCount={resultSetSize}
        defaultPageSize={page.pageSize}
        defaultPageNumber={page.pageNumber}
        onSelection={(records) => {
          if (records) {
            if (records.length === 1) {
              if (records[0] !== currentRecord) {
                dispatch(
                  crudActions.setCurrentRecord({ currentRecord: records[0] })
                );
                dispatch(
                  crudActions.selectRecords({ selectedRecords: records })
                );
              }
            } else if (currentRecord) {
              dispatch(crudActions.setCurrentRecord({} as any));
              dispatch(crudActions.selectRecords({ selectedRecords: records }));
            }
          }
        }}
        onDoubleClick={(record: [@EntityName@]) => {
          history.push(`/[@entity_name_dash@]/${record.[@entityId@]}/detail`);
        }}
        onPaging={(pageNumber, pageSize) => {
          setPage({
            pageNumber: pageNumber,
            pageSize: pageSize,
          });
        }}
        onSort={(sortConfig) => {
          dispatch(
            querySearch(
              {
                maxRowCount: 25,
                ...query,
                ...searchRequest?.template,
              },
              sortConfig,
              page.pageSize,
              page.pageNumber
            )
          );
        }}
      />
    </>
  );
};

export default [@EntityName@]ListPage;
