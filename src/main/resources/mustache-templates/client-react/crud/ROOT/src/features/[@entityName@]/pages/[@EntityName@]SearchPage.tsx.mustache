import React, { useEffect, useState } from "react";
import { useFormik } from "formik";
import queryString from "query-string";
import { useTranslation } from "react-i18next";
import { useHistory } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { Form } from "@jfront/ui-core";
import { ComboBox, ComboBoxItem, DatePicker, NumberInput, TextInput } from "@jfront/ui-core";
import {
  [@#fieldsSearch@]
  [@#isTypeOption@][@FieldName@]Option,[@/isTypeOption@]
  [@/fieldsSearch@]
  [@EntityName@]SearchTemplate} from "../api/[@EntityName@]Types";
import {
  [@#fieldsSearch@]
  [@#isTypeOption@]get[@FieldName@]Options,[@/isTypeOption@]
  [@/fieldsSearch@]
} from "../api/[@EntityName@]Api";
import { actions } from "../state/[@EntityName@]SearchSlice";
import { [@EntityName@]State } from "../state/[@EntityName@]Reducer";

const useQuery = () => {
  return queryString.parse(window.location.search, {arrayFormat: 'bracket'})
};

const [@EntityName@]SearchPage = ({ formRef }) => {
  //----------------
  const { t } = useTranslation();
  const history = useHistory();
  const dispatch = useDispatch();
  const template = useQuery();
  //----------------

  [@#fieldsSearch@]
  [@#isTypeOption@]const [[@fieldName@]Options, set[@FieldName@]Options] = useState<[@FieldName@]Option[]>();[@/isTypeOption@]
  [@/fieldsSearch@]
  
  const { searchRequest, isLoading } = useSelector(
    (state: [@EntityName@]State) => state.[@entityName@].[@entityName@]SearchSlice
  );

  [@#fieldsSearch@]
  [@#isTypeOption@]
  useEffect(() => {
    get[@FieldName@]Options().then((options) => {
      set[@FieldName@]Options(options);
    });
  }, []);
  [@/isTypeOption@]
  [@/fieldsSearch@]

  const formik = useFormik<[@EntityName@]SearchTemplate>({
    initialValues: {maxRowCount: 25, ...template, ...searchRequest.template},
    enableReinitialize: true,
    onSubmit: (values) => {
      dispatch(
        actions.setSearchTemplate({
          searchTemplate: {
            template: values,
          },
        })
      );
      let query = queryString.stringify(values, {arrayFormat: 'bracket'});
      if (query) {
        query = "&" + query;
      }
      history.push(`/[@entity_name_dash@]/list/?pageSize=25&page=1${encodeURI(query)}`);
    },
    validate: (values) => {
      const errors: {
        [@#fieldsSearch@]
        [@#isFieldRequired@]
        [@fieldName@][@#isTypeOption@]Code[@/isTypeOption@]?: string;
        [@/isFieldRequired@]
        [@/fieldsSearch@]
      } = {};

      let query = queryString.stringify(values);
      history.replace(`?${query}`);
      return errors;
    },
  });

  return (
    <>
      <Form onSubmit={formik.handleSubmit} ref={formRef}>
        
        [@#fieldsSearch@]
        [@>FieldTemplate.mustache@]
        [@/fieldsSearch@]
        
      </Form>
    </>
  );
};

export default [@EntityName@]SearchPage;
