import { RecordState } from "./../../app/common/recordSlice";
import { [@EntityName@], [@EntityName@]Create } from "./api/[@EntityName@]Types";
import { AppThunk, RootState } from "./../../app/store";
import { createGenericSlice } from "../../app/common/recordSlice";
import { [@entityName@]CrudApi } from "./api/[@EntityName@]CrudApi";

const initialState: RecordState<[@EntityName@]> = {
  currentRecord: null,
  error: null,
  saveOnCreate: false,
  saveOnEdit: false,
};

export const [@entityName@]Slice = createGenericSlice({
  name: "[@entityName@]Slice",
  initialState: initialState,
  reducers: {},
});

export const { setCurrentRecord } = [@entityName@]Slice.actions;
export const { getError } = [@entityName@]Slice.actions;
export const { setCreateRecord } = [@entityName@]Slice.actions;
export const { setSaveOnEditRecord } = [@entityName@]Slice.actions;

export const select[@EntityName@] = (state: RootState) => state.[@entityName@].currentRecord;
export const selectError = (state: RootState) => state.[@entityName@].error;
export const selectSaveOnCreate[@EntityName@] = (state: RootState) => state.[@entityName@].saveOnCreate;
export const selectSaveOnEdit[@EntityName@] = (state: RootState) => state.[@entityName@].saveOnEdit;

export const fetch[@EntityName@] = ([@entityId@]: string): AppThunk => async (dispatch) => {
  try {
    [@entityName@]CrudApi.getRecordById([@entityId@]).then(([@entityName@]) => {
      dispatch(setCurrentRecord([@entityName@]));
    });
  } catch (error) {
    dispatch(getError(error));
  }
};

export const create[@EntityName@] = ([@entityName@]: [@EntityName@]Create): AppThunk => async (dispatch) => {
  try {
    [@entityName@]CrudApi.create([@entityName@]).then(([@entityName@]) => {
      dispatch(setCurrentRecord([@entityName@]));
    });
  } catch (error) {
    dispatch(getError(error));
  }
};

export const submitSaveOnCreate = (): AppThunk => async (dispatch) => {
  dispatch(setCreateRecord(true));
};

export const submitSaveOnEdit = (): AppThunk => async (dispatch) => {
  dispatch(setSaveOnEditRecord(true));
};

export default [@entityName@]Slice.reducer;
